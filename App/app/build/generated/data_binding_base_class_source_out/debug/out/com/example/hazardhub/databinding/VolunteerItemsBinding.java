// Generated by view binder compiler. Do not edit!
package com.example.hazardhub.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.hazardhub.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class VolunteerItemsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button callVolunteer;

  @NonNull
  public final TextView nameVolunteer;

  @NonNull
  public final TextView volunteerBloodGroup;

  @NonNull
  public final TextView volunteerLocation;

  private VolunteerItemsBinding(@NonNull LinearLayout rootView, @NonNull Button callVolunteer,
      @NonNull TextView nameVolunteer, @NonNull TextView volunteerBloodGroup,
      @NonNull TextView volunteerLocation) {
    this.rootView = rootView;
    this.callVolunteer = callVolunteer;
    this.nameVolunteer = nameVolunteer;
    this.volunteerBloodGroup = volunteerBloodGroup;
    this.volunteerLocation = volunteerLocation;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static VolunteerItemsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static VolunteerItemsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.volunteer_items, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static VolunteerItemsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.call_volunteer;
      Button callVolunteer = ViewBindings.findChildViewById(rootView, id);
      if (callVolunteer == null) {
        break missingId;
      }

      id = R.id.name_volunteer;
      TextView nameVolunteer = ViewBindings.findChildViewById(rootView, id);
      if (nameVolunteer == null) {
        break missingId;
      }

      id = R.id.volunteer_bloodGroup;
      TextView volunteerBloodGroup = ViewBindings.findChildViewById(rootView, id);
      if (volunteerBloodGroup == null) {
        break missingId;
      }

      id = R.id.volunteer_location;
      TextView volunteerLocation = ViewBindings.findChildViewById(rootView, id);
      if (volunteerLocation == null) {
        break missingId;
      }

      return new VolunteerItemsBinding((LinearLayout) rootView, callVolunteer, nameVolunteer,
          volunteerBloodGroup, volunteerLocation);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
